/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { usePersonControls } from '../../utils/control';
import gsap from 'gsap';
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';
import { angleToRadians } from '../../utils/angle';

export default function Model(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/models/avatar.glb');
  const { actions } = useAnimations(animations, group);
  const { forward, backward, left, right, jump } = usePersonControls();
  const [smoothedCameraPosition] = useState(
    () => new THREE.Vector3(10, 10, 10)
  );
  const [smoothedCameraTarget] = useState(() => new THREE.Vector3());

  useEffect(() => {
    if (group.current) {
      console.log(group.current, 'group');
      const timeline = gsap.timeline({ paused: true });
      if (!forward && !backward && !left && !right && !jump) {
        actions.Idle.play();
        actions['Walk'].stop();
      }
      if (forward) {
        group.current.rotation.set(0, 0, 0);
        actions['Walk'].play();
        actions['Walk'].loop = 1;
        // x-axis motion
        let currentPositionY = group.current.position.y;

        // console.log(currentPositionX, 'currentPositionX');
        // group.current.position.set(0, currentPositionX + 0.1, 0);
        timeline.to(
          group.current.position,
          {
            y: currentPositionY + 0.05,
            duration: 0.5,
            ease: 'power3.out',
          },
          '<'
        );
        timeline.play();
        console.log(group.current, 'current');
      }
      if (backward) {
        group.current.rotation.set(0, 3.2, 0);
        actions['Walk'].play();
        actions['Walk'].loop = 1;
        // x-axis motion
        let currentPositionY = group.current.position.y;
        // console.log(currentPositionX, 'currentPositionX');
        // group.current.position.set(0, currentPositionX + 0.1, 0);
        timeline.to(
          group.current.position,
          {
            y: currentPositionY - 0.05,
            duration: 0.5,
            ease: 'power3.out',
          },
          '<'
        );
        timeline.play();
      }
      if (left) {
        group.current.rotation.set(0, 1.5, 0);
        actions['Walk'].play();
        actions['Walk'].loop = 1;
        // x-axis motion
        let currentPositionX = group.current.position.x;
        // console.log(currentPositionX, 'currentPositionX');
        // group.current.position.set(0, currentPositionX + 0.1, 0);
        timeline.to(
          group.current.position,
          {
            x: currentPositionX + 0.05,
            duration: 0.5,
            ease: 'power3.out',
          },
          '<'
        );
        timeline.play();
      }
      if (right) {
        group.current.rotation.set(0, 4.8, 0);
        actions['Walk'].play();
        actions['Walk'].loop = 1;
        // x-axis motion
        let currentPositionX = group.current.position.x;
        // console.log(currentPositionX, 'currentPositionX');
        // group.current.position.set(0, currentPositionX + 0.1, 0);
        timeline.to(
          group.current.position,
          {
            x: currentPositionX - 0.05,
            duration: 0.5,
            ease: 'power3.out',
          },
          '<'
        );
        timeline.play();
      }
    }
  });

  useFrame((state, delta) => {
    // console.log(state, 'delta');
    // console.log(delta, 'delta');

    let bodyPosition = group.current.position;

    const cameraPosition = new THREE.Vector3();
    cameraPosition.copy(bodyPosition);
    cameraPosition.z += -4;
    cameraPosition.y += 3;

    const cameraTarget = new THREE.Vector3();
    cameraTarget.copy(bodyPosition);
    cameraTarget.y += 1;

    smoothedCameraPosition.lerp(cameraPosition, 5 * delta);
    smoothedCameraTarget.lerp(cameraTarget, 5 * delta);

    state.camera.position.copy(smoothedCameraPosition);
    state.camera.lookAt(smoothedCameraTarget);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name='EyeLeft'
        geometry={nodes.EyeLeft.geometry}
        material={nodes.EyeLeft.material}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name='EyeRight'
        geometry={nodes.EyeRight.geometry}
        material={nodes.EyeRight.material}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name='Wolf3D_Head'
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name='Wolf3D_Teeth'
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload('/models/avatar.glb');
